var documenterSearchIndex = {"docs":
[{"location":"proximal/#Proximal-Operators","page":"Proximal Operators","title":"Proximal Operators","text":"","category":"section"},{"location":"proximal/","page":"Proximal Operators","title":"Proximal Operators","text":"The proximal operator for a variety of commonly used functions in optimization, data science, machine learning, and econometrics.","category":"page"},{"location":"proximal/#\\ell_{1}-norm","page":"Proximal Operators","title":"ell_1-norm","text":"","category":"section"},{"location":"proximal/","page":"Proximal Operators","title":"Proximal Operators","text":"soft_thresh\nsoft_thresh!","category":"page"},{"location":"proximal/#ProximalMethods.soft_thresh","page":"Proximal Operators","title":"ProximalMethods.soft_thresh","text":"soft_thresh(x, λ)\n\nCompute soft thresholding operator with scaling parameter λ at x, proximal operator of ℓ₁-norm.\n\nArguments\n\nx::Real\t: input\nλ::Real\t: scaling parameter\n\nReturns\n\ny::Real\t: soft thresholded value\n\n\n\n\n\n","category":"function"},{"location":"proximal/#\\ell_{2}-norm","page":"Proximal Operators","title":"ell_2-norm","text":"","category":"section"},{"location":"proximal/","page":"Proximal Operators","title":"Proximal Operators","text":"block_soft_thresh\nblock_soft_thresh!","category":"page"},{"location":"proximal/#ProximalMethods.block_soft_thresh","page":"Proximal Operators","title":"ProximalMethods.block_soft_thresh","text":"block_soft_thresh(x, λ)\n\nCompute block soft thresholding operator with scaling parameter λ at x, proximal operator of the ℓ₂-norm.\n\nArguments\n\nx::AbstractVector\t: input (n x 1)\nλ::Real\t\t\t: scaling parameter\n\nReturns\n\ny::AbstractVector\t: block soft thresholded value (n x 1)\n\n\n\n\n\n","category":"function"},{"location":"proximal/#ProximalMethods.block_soft_thresh!","page":"Proximal Operators","title":"ProximalMethods.block_soft_thresh!","text":"block_soft_thresh!(y, x, λ)\n\nCompute block soft thresholding operator with scaling parameter λ at x, proximal operator of the ℓ₂-norm, storing the results in y. See also block_soft_thresh.\n\n\n\n\n\nblock_soft_thresh!(x, λ)\n\nCompute block soft thresholding operator with scaling parameter λ at x, proximal operator of the ℓ₂-norm, overwriting x. See also block_soft_thresh.\n\n\n\n\n\n","category":"function"},{"location":"proximal/#\\ell{2}_{2}-norm-(ridge)","page":"Proximal Operators","title":"ell^2_2-norm (ridge)","text":"","category":"section"},{"location":"proximal/","page":"Proximal Operators","title":"Proximal Operators","text":"shrinkage\nshrinkage!","category":"page"},{"location":"proximal/#ProximalMethods.shrinkage","page":"Proximal Operators","title":"ProximalMethods.shrinkage","text":"shrinkage(x, λ)\n\nCompute shrinkage operator with scaling parameter λ at x, proximal operator of the squared ℓ₂-norm (ridge).\n\nArguments\n\nx::Real\t: input\nλ::Real\t: scaling parameter\n\nReturns\n\ny::Real\t: shrunken value\n\n\n\n\n\nshrinkage(x, λ, fac, b)\n\nCompute the generalized shrinkage operator with scaling parameter λ at x, proximal operator of a quadratic function with quadratic parameters A and linear parameters b using a factorization fac of I + λA.\n\nArguments\n\nx::AbstractVector : input\nλ::Real           : scaling parameter\nfac::Factorization: factorization of I + λA \nb::AbstractVector : linear coefficients\n\nReturns\n\ny::AbstractVector : shrunken values\n\n\n\n\n\nshrinkage(x, λ, A, b)\n\nCompute the generalized shrinkage operator with scaling parameter λ at x, proximal operator of a quadratic function with quadratic parameters A and linear parameters b.\n\nArguments\n\nx::AbstractVector : input\nλ::Real           : scaling parameter\nA::AbstractMatrix : quadratic coefficients\nb::AbstractVector : linear coefficients\n\nReturns\n\ny::AbstractVector : shrunken values\n\n\n\n\n\n","category":"function"},{"location":"proximal/#ProximalMethods.shrinkage!","page":"Proximal Operators","title":"ProximalMethods.shrinkage!","text":"shrinkage!(x, λ, fac, b)\n\nCompute the generalized shrinkage operator with scaling parameter λ at x, proximal operator of a quadratic function with quadratic parameters A and linear parameters b using a factorization fac of I + λA, overwriting x. See also shrinkage.\n\n\n\n\n\nshrinkage!(x, λ, A, b)\n\nCompute the generalized shrinkage operator with scaling parameter λ at x, proximal operator of a quadratic function with quadratic parameters A and linear parameters b, overwriting x. See also shrinkage.\n\n\n\n\n\n","category":"function"},{"location":"proximal/#Smooth-function","page":"Proximal Operators","title":"Smooth function","text":"","category":"section"},{"location":"proximal/","page":"Proximal Operators","title":"Proximal Operators","text":"smooth\nsmooth!","category":"page"},{"location":"proximal/#ProximalMethods.smooth","page":"Proximal Operators","title":"ProximalMethods.smooth","text":"smooth(x, λ, f, ∇f!, y_prev)\n\nCompute the proximal operator of a general smooth function f with in-place gradient ∇f! and scaling parameter λ at x using L-BFGS. Warm starting is accomodated by the use of y_prev, the previous solution.\n\nArguments\n\nx::AbstractVector     : input\nλ::Real               : scaling parameter\nf::Function           : objective function\n∇f!::Function         : gradient\ny_prev::AbstractVector: previous output\n\nReturns\n\ny::AbstractVector : output\n\n\n\n\n\n","category":"function"},{"location":"proximal/#ProximalMethods.smooth!","page":"Proximal Operators","title":"ProximalMethods.smooth!","text":"smooth!(y, x, λ, f, ∇f!, y_prev)\n\nCompute the proximal operator of a general smooth function f with in-place gradient ∇f! and scaling parameter λ at x using L-BFGS, storing the results in y. See also smooth!. Warm starting is accomodated by the use of y_prev, the previous solution.\n\n\n\n\n\nsmooth!(x, λ, f, ∇f!, y_prev)\n\nCompute the proximal operator of a general smooth function f with in-place gradient ∇f! and scaling parameter λ at x using L-BFGS, overwriting x. See also smooth!. Warm starting is accomodated by the use of y_prev, the previous solution.\n\n\n\n\n\n","category":"function"},{"location":"#ProximalMethods.jl","page":"ProximalMethods.jl","title":"ProximalMethods.jl","text":"","category":"section"},{"location":"","page":"ProximalMethods.jl","title":"ProximalMethods.jl","text":"This is a package for non-smooth optimization algorithms based on proximal methods.","category":"page"},{"location":"","page":"ProximalMethods.jl","title":"ProximalMethods.jl","text":"Provides proximal operator evaluation routines and proximal optimization algorithms, such as (accelerated) proximal gradient methods and alternating direction method of multipliers (ADMM), for non-smooth/non-differentiable objective functions.","category":"page"},{"location":"#Contents","page":"ProximalMethods.jl","title":"Contents","text":"","category":"section"},{"location":"","page":"ProximalMethods.jl","title":"ProximalMethods.jl","text":"Pages = [\"proximal.md\", \"algorithms.md\"]\nDepth = 1","category":"page"},{"location":"#Index","page":"ProximalMethods.jl","title":"Index","text":"","category":"section"},{"location":"","page":"ProximalMethods.jl","title":"ProximalMethods.jl","text":"","category":"page"},{"location":"algorithms/#Algorithms","page":"Algorithms","title":"Algorithms","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"The proximal optimization algorithms for minimization of non-smooth objective functions.","category":"page"},{"location":"algorithms/#Proximal-Gradient-Methods","page":"Algorithms","title":"Proximal Gradient Methods","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"prox_grad\nprox_grad!","category":"page"},{"location":"algorithms/#ProximalMethods.prox_grad","page":"Algorithms","title":"ProximalMethods.prox_grad","text":"prox_grad(x0, f, ∇f!, prox!; style=\"none\", β=.5, ϵ=1e-7, max_iter=1000)\n\nMinimize an objective function f(x) + g(x), where f(x) is differentibale while g(x) is not, using the proximal gradient method.\n\nArguments\n\nx0::AbstractVector    : initial parameter values (n x 1)\nf::Function           : f(x)\n∇f!::Function         : gradient of f\nprox!::Function       : proximal operator of g(x)\nstyle::AbstractString : acceleration style\nβ::Real               : line search parameter\nϵ::Real               : tolerance\nmax_iter::Integer     : max number of iterations\n\nReturns\n\nx::AbstractVector : minimizer (optimal parameter values) (n x 1)\n\n\n\n\n\n","category":"function"},{"location":"algorithms/#ProximalMethods.prox_grad!","page":"Algorithms","title":"ProximalMethods.prox_grad!","text":"prox_grad!(x, f, ∇f!, prox!; style=\"none\", β=.5, ϵ=1e-7, max_iter=1000)\n\nMinimize an objective function f(x) + g(x), where f(x) is differentibale while g(x) is not, using the proximal gradient method. Storing the result in x. See also prox_grad.\n\n\n\n\n\n","category":"function"},{"location":"algorithms/#Alternating-direction-method-of-multipliers-(ADMM)","page":"Algorithms","title":"Alternating direction method of multipliers (ADMM)","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"admm\nadmm!","category":"page"},{"location":"algorithms/#ProximalMethods.admm","page":"Algorithms","title":"ProximalMethods.admm","text":"admm(x0, prox_f!, prox_g!; λ=1., α=1., ϵ_abs=1e-7, ϵ_rel=1e-4, max_iter=1000)\n\nMinimize an objective function f(x) + g(x), where f(x) and g(x) can both be nonsmooth, using alternating direction method of multipliers, also known as Douglas-Rachford splitting. The alternating direction method of multipliers method has two hyperparameters, λ and α. λ controls the scaling of the update steps, i.e. a pseudo step size, and is equal to the inverse of the augmented Lagrangian parameter. α  02 is the relaxation parameter, where α  1 denotes under-relaxation and α  1 over-relaxation.\n\nArguments\n\nx0::AbstractVector: initial parameter values (n x 1)\nprox_f!::Function : proximal operator of f(x)\nprox_g!::Function : proximal operator of g(x)\nλ::Real           : proximal scaling parameter\nα::Real           : relaxation parameter\nϵ_abs::Real       : absolute tolerance\nϵ_rel::Real       : relative tolerance\nmax_iter::Integer : max number of iterations\n\nReturns\n\nx::AbstractVector : minimizer  dom f (n x 1)\nz::AbstractVector : minimizer  dom g (n x 1)\n\n\n\n\n\n","category":"function"},{"location":"algorithms/#ProximalMethods.admm!","page":"Algorithms","title":"ProximalMethods.admm!","text":"admm!(x, prox_f!, prox_g!; λ=1., α=1., ϵ_abs=1e-7, ϵ_rel=1e-4, max_iter=1000)\n\nMinimize an objective function f(x) + g(x), where f(x) and g(x) can both be nonsmooth, using alternating direction method of multipliers, also known as Douglas-Rachford splitting, overwriting x. See also admm.\n\n\n\n\n\n","category":"function"}]
}
